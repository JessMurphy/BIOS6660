\documentclass{article}
\usepackage[T1]{fontenc}


\begin{document}
\title{Methylation HW11}
\author{Jessica Murphy}

\maketitle

<<chunk_lib>>=
  
suppressWarnings(suppressMessages(library("minfi", quietly=T)))
suppressWarnings(suppressMessages(library("wateRmelon", quietly=T)))
suppressWarnings(suppressMessages(library("ChAMP", quietly=T)))
suppressWarnings(suppressMessages(library("sva", quietly=T)))
suppressWarnings(suppressMessages(library("RColorBrewer", quietly=T)))

sessionInfo()
@
  
\section{Read Data}
  
<<chunk_data>>= 

baseDir1 = "/BIOS6660/Methylation/plate1" #remove tildas before knitting
targets1 = read.metharray.sheet(baseDir1)

baseDir2 = "/BIOS6660/Methylation/plate2"
targets2 = read.metharray.sheet(baseDir2)

targets = rbind(targets1, targets2)

rgSet = read.metharray.exp(targets=targets, extended=T)
sampleNames(rgSet) = rgSet[[1]]
getManifest(rgSet)

#For deconvolution, the reference panel data are not an object of RGChannelSetExtended
rgSet_d = read.metharray.exp(targets=targets, extended=F)
sampleNames(rgSet_d) = rgSet_d[[1]]
getManifest(rgSet_d)

clindat = read.table("/BIOS6660/Methylation/demographic.txt", 
                     sep="\t", header=T)
stopifnot(all(clindat$Sample_Name==rgSet$Sample_Name))
pData(rgSet)$Sample_Group = clindat$Exposure
pData(rgSet)$child_sex = clindat$child_sex
@
  
\section{Detection P value}
  
<<chunk_Pvalue, fig.height=5>>=

mset = preprocessRaw(rgSet)

qc = getQC(mset)
plotQC(qc)

detP = detectionP(rgSet)
detPcut = 0.05

failed = detP > detPcut
fracfail = colMeans(failed)
main = paste("The fraction of failed positions per sample.")
x = seq(1, length(fracfail), 1)
plot(x, fracfail, main=main)

removeDetP = 0.1
badProbes = rowMeans(failed) > removeDetP

mset.f = mset[!badProbes,]
mset = mset.f

message("There are ", sum(badProbes), 
        " bad probes with high detection P values removed.")
@
  
\section{Check bead count}

<<chunk_beadCount>>=

beadCutoff = 0.1
bc = beadcount(rgSet)
quantile(bc, na.rm=T)

bc2 = bc[rowSums(is.na(bc)) < beadCutoff*(ncol(bc)), ]
mset.f2 = mset[featureNames(mset) %in% row.names(bc2), ]

message("Filtering probes with a beadcount <3 in at least ", 
        beadCutoff*100, "% of samples has removed ", dim(mset)[1]-
          dim(mset.f2)[1], " from the analysis.")

mset = mset.f2
@
  
\section{Check non-CG probes}

<<chunk_nonCGprobes>>=

mset.cg = dropMethylationLoci(mset, dropCH=T)

message("There are ", dim(mset)[1]-dim(mset.cg)[1], 
        " non-CG probes. Keep them in the final analysis dataset.")
@
  
\section{Map to the genome}

<<chunk_genome>>=

gset = mapToGenome(mset)

annotation = getAnnotation(gset, dropNonMapping=F) 
names(annotation)
table(annotation$chr)
dim(annotation)

annotation2 = getAnnotation(gset, dropNonMapping=T) 
dim(annotation2)

message("There are ", dim(annotation)[1]-dim(annotation2)[1], 
        " non-mapping probes.")

autosomes = annotation[!annotation$chr %in% c("chrX", "chrY"), ] 
allosomes = annotation[annotation$chr %in% c("chrX", "chrY"), ]
@
  
\section{Identify probes with SNP}

<<chunk_SNPprobes>>=

gset = addSnpInfo(gset)

getAnnotationObject(gset)

gset.f = dropLociWithSnps(gset, snps=c("SBE", "CpG"), maf=0)

message("The number of probes with snps is ", dim(gset)[1]-
          dim(gset.f)[1], ". Keep them for now.")
@

\section{Plot raw $\beta$ and M values}

<<chunk_BetaMvalues, fig.height=5>>=

beta.raw = getBeta(gset)
M.raw = getM(gset)
colnames(beta.raw) = sampleNames(mset)
colnames(M.raw) = sampleNames(mset)

M.raw.auto = M.raw[rownames(M.raw) %in% rownames(autosomes),]
beta.raw.auto = beta.raw[rownames(beta.raw) %in% rownames(autosomes),]
colnames(beta.raw.auto) = sampleNames(mset)
colnames(M.raw.auto) = sampleNames(mset)

missing_names = rownames(which(is.na(beta.raw.auto), arr.ind = T))
champ.SVD(beta=beta.raw.auto[!rownames(beta.raw.auto) %in% missing_names, ],  
          pd=pData(gset), resultsDir=paste(getwd(), "resultsChamp1", sep="/"))

missing_names = rownames(which(is.na(M.raw.auto) | is.infinite(M.raw.auto), 
                               arr.ind = T))
champ.SVD(beta=M.raw.auto[!rownames(M.raw.auto) %in% missing_names, ],   
          pd=pData(gset), resultsDir=paste(getwd(), "resultsChamp1", sep="/"))

#Find probe types
probe_types = data.frame(cbind(rownames(gset), getProbeType(gset)))

#Names are required by plotBetasByType function
names(probe_types) = c("Name", "Type")

#plot density of beta value using average beta
plotBetasByType(rowMeans(beta.raw), probeTypes=probe_types, 
                legendPos="top", colors=c("black", "red", "blue"),
                main="Raw beta values", lwd = 3, cex.legend = 1)
@

\section{Normalization}

<<chunk_normalization, fig.height=5>>=
gset.norm = preprocessQuantile(gset, removeBadSamples = T)

M.norm = getM(gset.norm)
beta.norm = getBeta(gset.norm)

colnames(beta.norm) = sampleNames(mset)
colnames(M.norm) = sampleNames(mset)

M.norm.auto = M.norm[rownames(M.norm) %in% rownames(autosomes),]
beta.norm.auto = beta.norm[rownames(beta.norm) %in% rownames(autosomes),]

colnames(beta.norm.auto) = sampleNames(mset)
colnames(M.norm.auto) = sampleNames(mset)

champ.SVD(beta=M.norm.auto,  pd=pData(gset.norm),
          resultsDir=paste(getwd(), "resultsChamp1", sep="/"))

champ.SVD(beta=beta.norm.auto,  pd=pData(gset.norm),
          resultsDir=paste(getwd(), "resultsChamp1", sep="/"))

#Plot betas after normalization
probe_types = data.frame(cbind(rownames(gset.norm), getProbeType(gset.norm)))
names(probe_types) <- c("Name", "Type")

#Plot density of beta value using average beta
plotBetasByType(rowMeans(beta.norm), probeTypes=probe_types, 
                legendPos="top", colors=c("black", "red", "blue"),
                main="Normalized beta values", lwd=3, cex.legend=1)
@

\section{Check sex}

<<chunk_sex, fig.height=6, fig.width=8>>=
addSex(gset.norm)

#Identify samples whose clincal sex is different from the predicted sex
table(pData(gset.norm)$child_sex, pData(gset.norm)$predictedSex)

wrongsex = pData(gset.norm)[pData(gset.norm)$predictedSex != 
                               pData(gset.norm)$child_sex, "Sample_Name"]
wrongsex

mdsPlot(M.norm, numPositions=1000, sampGroups=pData(gset.norm)$child_sex, 
        sampNames=pData(gset.norm)$Sample_Name, main="Whole genome")
@

\section{Batch correction}

<<chunk_batch, fig.height=5>>=
pd.norm = pData(gset.norm)

batch = pd.norm$Slide

#Sample_Group is the exposure satus, which is our main interest
mod = model.matrix(~as.factor(Sample_Group), data=pd.norm)

#M from quantile normalization
M.norm.batch.tmp = ComBat(M.norm, batch, mod, par.prior=T, prior.plots=F)
nrow(M.norm.batch.tmp)
colnames(M.norm.batch.tmp) = sampleNames(mset)

champ.SVD(beta=M.norm.batch.tmp[row.names(M.norm.batch.tmp) %in% row.names(autosomes), ],
          pd=pData(gset.norm), resultsDir=paste(getwd(), "resultsChamp1", sep="/"))

#Remove probes that have SNPs or are cross-hybridising
M.norm.batch = rmSNPandCH(M.norm.batch.tmp, dist=2, mafcut=0.05)
colnames(M.norm.batch)
nrow(M.norm.batch)

#get batch corrected beta value
beta.norm.batch = 2^M.norm.batch/(1+2^M.norm.batch)
@

\section{Cell type deconvolution}

<<chunk_deconvolution>>=
#Change data types to match data types of the reference panel data
pData(rgSet_d)$Sample_Name = as.character(pData(rgSet_d)$Sample_Name)
pData(rgSet_d)$Slide = as.numeric(pData(rgSet_d)$Slide)

cellcounts = estimateCellCounts(rgSet_d, compositeCellType="Blood",
            cellTypes=c("CD8T","CD4T", "NK","Bcell","Mono","Gran"),
            returnAll= F, meanPlot=T, verbose=T)
rownames(cellcounts)
colnames(cellcounts)

stopifnot(all(rownames(cellcounts)==clindat$Sample_Name))

covariates = cbind(clindat, cellcounts)
@

\section{DMP Analysis}

<<chunk_analysis_dmp, dev="png",  fig.height=6, fig.width=8>>=

stopifnot(all(covariates$Sample_Name==colnames(M.norm.batch)))

nCpG = nrow(M.norm.batch)
results1 = data.frame(matrix(NA, nrow=nCpG, ncol=4))
colnames(results1) = c("coef", "se", "pvalue", "adjP")
rownames(results1) = rownames(M.norm.batch)
results2 = data.frame(matrix(NA, nrow=nCpG, ncol=4))
colnames(results2) = c("coef", "se", "pvalue", "adjP")
rownames(results2) = rownames(M.norm.batch)
#CpG = rownames(M.norm.batch)

#this is much faster than looped lm
X = model.matrix(~Exposure + CD8T + 
      CD4T + NK + Bcell + Mono + Gran, covariates)
n = nrow(X)
k = ncol(X)-1
  
betas = t(solve(t(X) %*% X) %*% t(X) %*% t(M.norm.batch))
y_hat = betas %*% t(X)
MSE = rowSums((M.norm.batch-y_hat)^2)/(n-k-1)
sebetas = sqrt(MSE%*%t(diag(solve(t(X)%*%X))))
P = 2*(1-pt(abs(betas/sebetas), n-k-1))
  
results2[, "coef"] = betas[,"Exposure"]
results2[, "se"] = sebetas[,"Exposure"]
results2[, "pvalue"] = P[,"Exposure"]
  
results2[,'adjP'] = p.adjust(results2[,'pvalue'], method="fdr")
min(results2[,'pvalue'])
m = ceiling(abs(log10(min(results2[,'pvalue'])))) + 1

sum(results2[,'adjP'] < 0.01)
sum(results2[,'adjP'] < 0.05)
sum(results2[,'adjP'] < 0.1)
sum(results2[,'adjP'] < 0.2)

observed2 = sort(results2[, "pvalue"])
lobs2 = -log10(observed2)

expected2 = c(1:length(observed2))
lexp2 = -(log10(expected2 / (length(expected2)+1)))
main = "Adjusted for blood cell counts."
plot(c(0,m), c(0,m), col="red", lwd=3, type="l", xlab="Expected (-logP)", 
     ylab="Observed (-logP)", xlim=c(0,m), ylim=c(0,m), 
     las=1, xaxs="i", yaxs="i", bty="l", main=main)
points(lexp2, lobs2, pch=23, cex=.4, bg="black")

inflate2 = qchisq(median(results2[,"pvalue"]), df=1, lower.tail = F)/
  qchisq(0.5, df=1, lower.tail = F)
inflate2

results2[12,]

#Use lm to check the results
y = M.norm.batch[12,]
fit = lm(y ~ as.factor(Exposure)  + CD8T +
    CD4T + NK + Bcell + Mono + Gran, data=covariates)
summary(fit)

if(0){
  for (i in 1:nCpG){
    y <- M.norm.batch[i,]
    fit <- lm(y ~ as.factor(Exposure)  + CD8T +
    CD4T + NK + Bcell + Mono + Gran, data=covariates)
    if (substr(rownames(summary(fit)$coefficients)[2], 11, 18) == "Exposure"){
      results1[i, "coef"] <- summary(fit)$coefficients[2,1]
      results1[i, "se"] <- summary(fit)$coefficients[2,2]
      results1[i, "pvalue"] <- summary(fit)$coefficients[2,4]
    }
    else{
      cat(rownames(M.norm.batch)[i], "wrong coefficients\n")
    }
  }
  
inflate1 = qchisq(median(results1[,"pvalue"]), df=1, lower.tail = F)/
  qchisq(0.5, df=1, lower.tail = F)
inflate1
  
results1[,'adjP'] = p.adjust(results1[,'pvalue'], method="fdr")

m = ceiling(abs(log10(min(results1[,'pvalue'])))) + 1
  
sum(results1[,'adjP'] < 0.01)
sum(results1[,'adjP'] < 0.05)
sum(results1[,'adjP'] < 0.1)
sum(results1[,'adjP'] < 0.2)
  
observed1 = sort(results1[, "pvalue"])
lobs1 = -log10(observed1)
  
expected1 = c(1:length(observed1))
lexp1 = -(log10(expected1 / (length(expected1)+1)))
main = "Adjusted for blood cell counts."
plot(c(0,m), c(0,m), col="red", lwd=3, type="l", xlab="Expected (-logP)", 
       ylab="Observed (-logP)", xlim=c(0,m), ylim=c(0,m), 
       las=1, xaxs="i", yaxs="i", bty="l", main=main)
points(lexp1, lobs1, pch=23, cex=.4, bg="black")
}
@

\section{DMR Analysis}

<<chunk_analysis_dmr, dev="png",  fig.height=6, fig.width=8>>=

design = model.matrix(~Exposure  + CD8T +
  CD4T + NK + Bcell + Mono + Gran , data = covariates)
 
colnames(design) = c("(Intercept)", "Exposure",  "CD8T", "CD4T", 
                      "NK", "Bcell", "Mono", "Gran")

myannotation = cpg.annotate(datatype = c("array"), object=M.norm.batch,
    arraytype="450K", what="M", analysis.type="differential", coef=2, 
    fdr=0.2, design=design)

dmrcoutput = dmrcate(myannotation, lambda=1000, c=2, p.adjust.method = "BH",
                      pcutoff = 0.05, consec = FALSE)

nrow(dmrcoutput$results)
dmrcoutput$results[1:5,]
  
results.ranges = extractRanges(dmrcoutput, genome = "hg19")
results.ranges
  
groups = c("1"="red", "0"="forestgreen")
cols = groups[as.character(covariates$Exposure)]

DMR.plot(ranges=results.ranges, dmr=2201, CpGs=beta.norm.batch, 
         what="Beta", arraytype="450K", phen.col=cols, genome="hg19")
@

\end{document}