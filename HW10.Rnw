\documentclass{article}
\usepackage[T1]{fontenc}


\begin{document}
\title{Methylation HW10}
\author{Jessica Murphy}

\maketitle

<<chunk_lib>>=
  
suppressWarnings(suppressMessages(library("minfi", quietly=T)))
suppressWarnings(suppressMessages(library("wateRmelon", quietly=T)))
suppressWarnings(suppressMessages(library("ChAMP", quietly=T)))
suppressWarnings(suppressMessages(library("RColorBrewer", quietly=T)))

sessionInfo()
@
  
\section{Read Data}
  
<<chunk_data>>= 

baseDir1 = "/BIOS6660/Methylation/plate1"
targets1 = read.metharray.sheet(baseDir1)

baseDir2 = "/BIOS6660/Methylation/plate2"
targets2 = read.metharray.sheet(baseDir2)

targets = rbind(targets1, targets2)

rgSet = read.metharray.exp(targets=targets, extended=T)
sampleNames(rgSet) = rgSet[[1]]
rgSet
getManifest(rgSet)

clindat = read.table("/BIOS6660/Methylation/demographic.txt", 
                     sep="\t", header=T)
table(clindat$Exposure, clindat$child_sex)
stopifnot(all(clindat$Sample_Name==rgSet$Sample_Name))
pData(rgSet)$Sample_Group = clindat$Exposure
pData(rgSet)$child_sex = clindat$child_sex
@
  
\section{Detection P value}
  
<<chunk_Pvalue, fig.height=5>>=

mset = preprocessRaw(rgSet)
mset

qc = getQC(mset)
plotQC(qc)

detP = detectionP(rgSet)
detPcut = 0.05

failed = detP > detPcut
fracfail = colMeans(failed)
main = paste("The fraction of failed positions per sample.")
x = seq(1, length(fracfail), 1)
plot(x, fracfail, main=main)

removeDetP = 0.1
badProbes = rowMeans(failed) > removeDetP

mset.f = mset[!badProbes,]
mset.f
mset = mset.f

message("There are ", sum(badProbes), 
        " bad probes with high detection P values removed.")
@
  
\section{Check bead count}

<<chunk_beadCount>>=

beadCutoff = 0.1
bc = beadcount(rgSet)
quantile(bc, na.rm=T)

bc2 = bc[rowSums(is.na(bc)) < beadCutoff*(ncol(bc)), ]
mset.f2 = mset[featureNames(mset) %in% row.names(bc2), ]
mset.f2

message("Filtering probes with a beadcount <3 in at least ", 
        beadCutoff*100, "% of samples has removed ", dim(mset)[1]-
          dim(mset.f2)[1], " from the analysis.")

mset = mset.f2
@
  
\section{Check non-CG probes}

<<chunk_nonCGprobes>>=

mset.cg = dropMethylationLoci(mset, dropCH=T)
mset.cg

message("There are ", dim(mset)[1]-dim(mset.cg)[1], 
        " non-CG probes. Keep them in the final analysis dataset.")
@
  
\section{Map to the genome}

<<chunk_genome>>=

gset = mapToGenome(mset)
gset

annotation = getAnnotation(gset, dropNonMapping=F) 
names(annotation)
table(annotation$chr)
dim(annotation)

annotation2 = getAnnotation(gset, dropNonMapping=T) 
dim(annotation2)

message("There are ", dim(annotation)[1]-dim(annotation2)[1], 
        " non-mapping probes.")

autosomes = annotation[!annotation$chr %in% c("chrX", "chrY"), ] 
allosomes = annotation[annotation$chr %in% c("chrX", "chrY"), ]
@
  
\section{Identify probes with SNP}

<<chunk_SNPprobes>>=

gset = addSnpInfo(gset)

getAnnotationObject(gset)

gset.f = dropLociWithSnps(gset, snps=c("SBE", "CpG"), maf=0)

message("The number of probes with snps is ", dim(gset)[1]-
          dim(gset.f)[1], ". Keep them for now.")
@

\section{Plot raw $\beta$ and M values}

<<chunk_BetaMvalues, fig.height=5>>=

beta.raw = getBeta(gset)
M.raw = getM(gset)
colnames(beta.raw) = sampleNames(mset)
colnames(M.raw) = sampleNames(mset)

champ.SVD(beta=beta.raw, pd=pData(rgSet), 
          resultsDir = paste(getwd(), "resultsChamp1", sep = "/"))

gset.auto = gset[featureNames(gset) %in% row.names(autosomes), ] 
beta.raw.auto = getBeta(gset.auto)
M.raw.auto = getM(gset.auto)

champ.SVD(beta=beta.raw.auto, pd=pData(rgSet), 
          resultsDir = paste(getwd(), "resultsChamp1", sep = "/"))

champ.SVD(beta=M.raw.auto, pd=pData(rgSet), 
          resultsDir = paste(getwd(), "resultsChamp1", sep = "/"))

totalProbes = dim(beta.raw)[1] 
main1 = bquote("Density plot of raw"~beta~"("*.(totalProbes)~"probes)") 
pal = brewer.pal(8, "Dark2") 
densityPlot(beta.raw, sampGroups=pData(gset)$Sample_Plate, 
            main=main1, xlab=expression(beta), legend=F)
legend("top", legend=levels(as.factor(pData(gset)$Sample_Plate)), 
       text.col=pal)

main2 <- paste("Density plot of raw M (", totalProbes, 
               " probes)", sep="")
densityPlot(M.raw, sampGroups=pData(gset)$Sample_Plate, 
            main=main2, xlab="M", legend=F) 
legend("topright", legend=levels(as.factor(pData(gset)$Sample_Plate)), 
       text.col=pal)
@

\end{document}